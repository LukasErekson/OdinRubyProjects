var search_data = {"index":{"searchIndex":["node","tree","<=>()","balanced?()","build_tree()","delete()","depth()","each()","find()","find_inorder_successor()","height()","inorder()","inorder_traverse()","insert()","left=()","level_order()","level_order_iter()","level_order_rec()","new()","new()","postorder()","postorder_traverse()","preorder()","preorder_traverse()","pretty_print()","rebalance()","right=()","to_s()","to_s()","tep"],"longSearchIndex":["node","tree","node#<=>()","tree#balanced?()","tree#build_tree()","tree#delete()","tree#depth()","tree#each()","tree#find()","tree#find_inorder_successor()","tree#height()","tree#inorder()","tree#inorder_traverse()","tree#insert()","node#left=()","tree#level_order()","tree#level_order_iter()","tree#level_order_rec()","node::new()","tree::new()","tree#postorder()","tree#postorder_traverse()","tree#preorder()","tree#preorder_traverse()","tree#pretty_print()","tree#rebalance()","node#right=()","node#to_s()","tree#to_s()",""],"info":[["Node","","Node.html","","<p>Node class to be part of a binary tree; has a left and right child as well as a value.\n"],["Tree","","Tree.html","","<p>Binary Search Tree class\n"],["<=>","Node","Node.html#method-i-3C-3D-3E","(other)","<p>Compares nodesbased on their value\n<p><code>other</code> &mdash; The other node to compare values.\n\n"],["balanced?","Tree","Tree.html#method-i-balanced-3F","()","<p>Returns whether the tree is balanced or not. To be balanced, the difference of the heghts between each …\n"],["build_tree","Tree","Tree.html#method-i-build_tree","(sorted_array)","<p>Builds a binary search tree using values in a sorted array.\n<p><code>sorted_array</code> &mdash; A sorted array to turn into a …\n\n"],["delete","Tree","Tree.html#method-i-delete","(value, current_node = @root)","<p>Deletes the node with <code>value</code> passed in. Returns <code>true</code> if it was successfully removed, <code>false</code> if no such …\n"],["depth","Tree","Tree.html#method-i-depth","(sought_node, current_node = @root)","<p>Returns the depth of <code>node</code>, or the number of edges in the path from <code>node</code> to the <code>root</code>.\n<p><code>sought_node</code> &mdash; The node …\n"],["each","Tree","Tree.html#method-i-each","(iter_method = '', vals_only: true, &block)","<p><code>iter_method</code> &mdash; The method with which to iterate through.\n<p><code>vals_only</code> &mdash; Whether or not the iteration should be …\n"],["find","Tree","Tree.html#method-i-find","(value, current_node = @root)","<p>Finds and returns a node with <code>value</code> as its value. Returns nil if no such node exists in the tree.\n<p><code>value</code> … &mdash; "],["find_inorder_successor","Tree","Tree.html#method-i-find_inorder_successor","(node)","<p>Finds the inorder sucessor of <code>node</code> by finding the node with the smallest value in the right subtree of …\n"],["height","Tree","Tree.html#method-i-height","(node)","<p>Returns the height of <code>node</code>, or the number of edges in the longest path from <code>node</code> to a leaf node.\n<p><code>node</code> … &mdash; "],["inorder","Tree","Tree.html#method-i-inorder","(only_vals: true)","<p>Returns an array of elements in the tree traversed using inorder. Acts as a wrapper for #inorder_traverse …\n"],["inorder_traverse","Tree","Tree.html#method-i-inorder_traverse","(current_node = @root)","<p>Returns an array of elements using inorder.\n<p><code>current_node</code> &mdash; The current node whose children are being looked …\n\n"],["insert","Tree","Tree.html#method-i-insert","(value, current_node = @root)","<p>Inserts a new node with <code>value</code> into its appropriate place in the tree. Returns <code>true</code> if insertion was successful …\n"],["left=","Node","Node.html#method-i-left-3D","(other)","<p>Assigns the left child unless <code>other</code> is not a Node object or nil.\n"],["level_order","Tree","Tree.html#method-i-level_order","(only_vals: true)","<p>Shorthand warpper for level_order_iter\n"],["level_order_iter","Tree","Tree.html#method-i-level_order_iter","(only_vals: true)","<p>Returns an array of the nodes in level order iteratively.\n<p><code>only_vals</code> &mdash; Return an array of just the values …\n\n"],["level_order_rec","Tree","Tree.html#method-i-level_order_rec","(level_order_array = [@root], children_queue = [@root.left, @root.right], only_vals: true)","<p>Returns an array of the nodes in level order recursively.\n<p><code>level_order_array</code> &mdash; The array of Node objects …\n"],["new","Node","Node.html#method-c-new","(value = nil)","<p>Creates a node with nil values\n<p><code>value</code> &mdash; The value for the node to hold.\n\n"],["new","Tree","Tree.html#method-c-new","(array = [], sorted = false)","<p>Initializes a new Binary Search Tree with values from <code>array</code>.\n<p><code>array</code> &mdash; The array containing the values for …\n"],["postorder","Tree","Tree.html#method-i-postorder","(only_vals: true)","<p>Returns an array of elements in the tree traversed using postorder. Acts as a wrapper for postorder_traverse …\n"],["postorder_traverse","Tree","Tree.html#method-i-postorder_traverse","(current_node = @root)","<p>Returns an array of elements using postorder.\n<p><code>current_node</code> &mdash; The current node whose children are being looked …\n\n"],["preorder","Tree","Tree.html#method-i-preorder","(only_vals: true)","<p>Returns an array of elements in the tree traversed using preorder. Acts as a wrapper for preorder_traverse …\n"],["preorder_traverse","Tree","Tree.html#method-i-preorder_traverse","(current_node = @root)","<p>Returns an array of elements using preorder.\n<p><code>current_node</code> &mdash; The current node whose children are being looked …\n\n"],["pretty_print","Tree","Tree.html#method-i-pretty_print","(node = @root, prefix = '', is_left = true)","<p>Visualization of the binary tree, written by a community member of The Odin Project. Mainly used for …\n"],["rebalance","Tree","Tree.html#method-i-rebalance","()","<p>Balances an unbalanced tree.\n"],["right=","Node","Node.html#method-i-right-3D","(other)","<p>Assigns the right child unless <code>other</code> is not a Node object or nil.\n<p>+other &mdash; The value to\n\n"],["to_s","Node","Node.html#method-i-to_s","()","<p>Represents the node as a string with its value and children.\n"],["to_s","Tree","Tree.html#method-i-to_s","()","<p>Alias for pretty_print\n"],["tep","","tep.html","","<p>\u001b[1mFrom:\u001b[0m /home/lukase/TheOdinProject/ruby-exercises/binary_search_tree/lib/tree.rb:79 Tree#delete …\n"]]}}