var search_data = {"index":{"searchIndex":["emptylisterror","linkedlist","node","==()","[]()","append()","at()","contains?()","each()","find()","insert_at()","new()","new()","pop()","prepend()","remove_at()","to_s()","to_s()"],"longSearchIndex":["emptylisterror","linkedlist","node","node#==()","linkedlist#[]()","linkedlist#append()","linkedlist#at()","linkedlist#contains?()","linkedlist#each()","linkedlist#find()","linkedlist#insert_at()","linkedlist::new()","node::new()","linkedlist#pop()","linkedlist#prepend()","linkedlist#remove_at()","linkedlist#to_s()","node#to_s()"],"info":[["EmptyListError","","EmptyListError.html","","<p>LinkedList error when certain methods are tried on an empty linked list.\n"],["LinkedList","","LinkedList.html","","<p>Linked List class. Contains a list of node objects\n"],["Node","","Node.html","","<p>Node class for a linked list. A node contains data and also a link to the next node.\n"],["==","Node","Node.html#method-i-3D-3D","(other)","<p>Defines what it means for two nodes to be equal\n"],["[]","LinkedList","LinkedList.html#method-i-5B-5D","(idx)","<p>Alias for at\n"],["append","LinkedList","LinkedList.html#method-i-append","(value)","<p>Appends a node with <code>value</code> as the new tail of the list.\n"],["at","LinkedList","LinkedList.html#method-i-at","(idx)","<p>Returns the node at <code>idx</code> (zero-based indexing)\n"],["contains?","LinkedList","LinkedList.html#method-i-contains-3F","(value)","<p>Returns whether or not the list contains <code>value</code>\n"],["each","LinkedList","LinkedList.html#method-i-each","(&block)","<p>Iterates through each of of the values in the linked list\n"],["find","LinkedList","LinkedList.html#method-i-find","(value)","<p>Returns the index of the node with value <code>value</code> Returns <code>nil</code> if no such node is in the list\n"],["insert_at","LinkedList","LinkedList.html#method-i-insert_at","(value, idx)","<p>Inserts a new node with <code>value</code> at <code>idx</code> Returns <code>true</code> if insertion was succssful\n"],["new","LinkedList","LinkedList.html#method-c-new","()","<p>Initializes the linked list with no initial nodes\n"],["new","Node","Node.html#method-c-new","(value = nil)","<p>Creates a node with a given value.\n"],["pop","LinkedList","LinkedList.html#method-i-pop","(num_pop = 1)","<p>Removes and returns the head or list of items\n<p><code>num_pop</code> &mdash; The amonunt of times to pop.\n\n"],["prepend","LinkedList","LinkedList.html#method-i-prepend","(value)","<p>Prepends a node with <code>value</code> as the new head of the list.\n"],["remove_at","LinkedList","LinkedList.html#method-i-remove_at","(idx)","<p>Removes and returns the node at <code>idx</code>\n"],["to_s","LinkedList","LinkedList.html#method-i-to_s","()","<p>Represents the linked list as a string\n"],["to_s","Node","Node.html#method-i-to_s","()","<p>Represents the node as a string\n"]]}}